"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const gulp_file_1 = tslib_1.__importDefault(require("gulp-file"));
const componentTargets_1 = tslib_1.__importDefault(require("./componentTargets"));
const ProjectConfiguration_1 = require("./ProjectConfiguration");
const resources = tslib_1.__importStar(require("./resources"));
const sdkVersion_1 = require("./sdkVersion");
const manifestPath = 'manifest.json';
function makeCommonManifest({ projectConfig, buildId, apiVersion, }) {
    return {
        apiVersion,
        buildId,
        bundleDate: new Date().toISOString(),
        uuid: projectConfig.appUUID,
        name: projectConfig.appDisplayName,
        requestedPermissions: projectConfig.requestedPermissions,
    };
}
function makeDeviceManifest({ projectConfig, buildId, }) {
    const manifest = Object.assign({ appManifestVersion: 1, main: componentTargets_1.default.device.output, svgMain: resources.svgMain, svgWidgets: resources.svgWidgets, appType: projectConfig.appType, i18n: projectConfig.i18n }, makeCommonManifest({
        projectConfig,
        buildId,
        apiVersion: sdkVersion_1.apiVersions(projectConfig).deviceApi,
    }));
    if (projectConfig.appType !== ProjectConfiguration_1.AppType.CLOCKFACE) {
        manifest.iconFile = projectConfig.iconFile;
        manifest.wipeColor = projectConfig.wipeColor;
    }
    return gulp_file_1.default(manifestPath, JSON.stringify(manifest));
}
exports.makeDeviceManifest = makeDeviceManifest;
function makeCompanionManifest({ projectConfig, hasSettings, buildId, }) {
    const manifest = Object.assign({ manifestVersion: 2, companion: { main: componentTargets_1.default.companion.output } }, makeCommonManifest({
        projectConfig,
        buildId,
        apiVersion: sdkVersion_1.apiVersions(projectConfig).companionApi,
    }));
    if (hasSettings) {
        manifest.settings = { main: componentTargets_1.default.settings.output };
    }
    return gulp_file_1.default(manifestPath, JSON.stringify(manifest));
}
exports.makeCompanionManifest = makeCompanionManifest;
